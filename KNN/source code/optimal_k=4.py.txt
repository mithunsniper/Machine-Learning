import struct
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import math
import operator
from numpy import float64



def read_idx(filename):
    with open(filename, 'rb') as f:
        zero,data_type,dims=struct.unpack('>HBB',f.read(4))
        shape=tuple(struct.unpack('>I',f.read(4))[0] for d in range(dims))
        return np.fromstring(f.read(),dtype=np.uint8).reshape(shape)


raw_train=read_idx("train-images.idx3-ubyte")
train_data=np.reshape(raw_train,(60000,28*28))
train_label=read_idx("train-labels.idx1-ubyte")

raw_test=read_idx("t10k-images.idx3-ubyte")
test_data=np.reshape(raw_test,(10000,28*28))

test_label=read_idx("t10k-labels.idx1-ubyte")


train_data=np.array(train_data,dtype=float64)
test_data=np.array(test_data,dtype=float64)





def euclideanDistance(instance1, instance2, length):
	distance = 0
	for x in range(length):
		distance += pow((instance1[x] - instance2[x]), 2)
	return math.sqrt(distance)



def getNeighbors(trainingSet, testInstance, k,train_label):
	distances = []

	length = len(testInstance)-1
	for x in range(int(len(trainingSet))):
		dist = euclideanDistance(testInstance, trainingSet[x],length)
		distances.append((trainingSet[x],train_label[x], dist))
	distances.sort(key=operator.itemgetter(2))
	
	neighbors = []

	for x in range(k):
		neighbors.append(distances[x][1])
	
	return neighbors


def findKnearest(countneighbours):
	return sorted(countneighbours.items(), key=operator.itemgetter(1), reverse=True)


def find_majority(neighbors):


	countneighbours = {}


	for m in range(len(neighbors)):
		value =neighbors[m]
		if value in countneighbours:
			countneighbours[value] += 1
		else:
			countneighbours[value] = 1

		total = findKnearest(countneighbours)
	
	return total[0][0]


def plot_confusion_matrix(df_confusion, title='Confusion matrix', cmap=plt.cm.gray_r):
    plt.matshow(df_confusion, cmap=cmap)
    plt.colorbar()
    tick_marks = np.arange(len(df_confusion.columns))
    plt.xticks(tick_marks, df_confusion.columns, rotation=45)
    plt.yticks(tick_marks, df_confusion.index)
    plt.ylabel(df_confusion.index.name)
    plt.xlabel(df_confusion.columns.name)
    plt.show()






#MAIN CLASSIFIER 
k=4
correct_v=0
y_pred=[]
y_actu=[]


for x in range(int(len(test_data))):
		neighbors = getNeighbors(train_data,test_data[x], k,train_label)
		label_pred=find_majority(neighbors)
		y_pred.append(label_pred)
		y_actu.append(test_label[x])
		
		if label_pred==test_label[x]:
			correct_v +=1


accuracy=correct_v/(int(len(test_data)))
print ("Accuracy for k=4 in percentage :%2f"%(accuracy*100))

x1=pd.Series(y_actu, name='Actual')
y1=pd.Series(y_pred, name='Predicted')
df_confusion = pd.crosstab(x1,y1,margins=True)
print(df_confusion)
plot_confusion_matrix(df_confusion)




