import struct
import numpy as np
import matplotlib.pyplot as plt
import random
import math
import operator
from numpy import float64
from random import shuffle



def read_idx(filename):
    with open(filename, 'rb') as f:
        zero,data_type,dims=struct.unpack('>HBB',f.read(4))
        shape=tuple(struct.unpack('>I',f.read(4))[0] for d in range(dims))
        return np.fromstring(f.read(),dtype=np.uint8).reshape(shape)

raw_train=read_idx("train-images.idx3-ubyte")
train_label=read_idx("train-labels.idx1-ubyte")


raw_test=read_idx("t10k-images.idx3-ubyte")
test_label=read_idx("t10k-labels.idx1-ubyte")

raw_train=np.array(raw_train,dtype=float64)
raw_test=np.array(raw_test,dtype=float64)







def euclideanDistance(instance1, instance2, length):
 	distance = 0
 	for x in range(length):
 		distance += pow((instance1[x] - instance2[x]), 2)
	return math.sqrt(distance)



def getNeighbors(trainingset, testinstance, k,train_label):
	distances_main =[]

	length = len(testinstance)-1
	for x in range(int(len(trainingset))):

		sample = np.array(trainingset[x, :])
		
		sample = np.pad(sample, pad_width=1, mode='constant', constant_values=1)

		
		s1 = np.array(sample[0:28, 0:28])
		s2 = np.array(sample[0:28, 1:29])
		s3 = np.array(sample[0:28, 2:30])
		s4 = np.array(sample[1:29, 0:28])
		s5 = np.array(sample[1:29, 1:29])
		s6 = np.array(sample[1:29, 2:30])
		s7 = np.array(sample[2:30, 0:28])
		s8 = np.array(sample[2:30, 1:29])
		s9 = np.array(sample[2:30, 2:30])


		distances = np.empty([1, 1])
		image = np.array([s1, s2, s3, s4, s5, s6, s7, s8, s9])
		
		for i in range(9):
			test = np.reshape(image[i], (1, 784))
			testinstance=np.reshape(testinstance,(1,784))
			dist = euclideanDistance(testinstance, test,length)
			dist = np.reshape(dist, (1, 1))
			distances = np.append(distances, dist, 0)
		
	distances = np.array(distances[1:10, :])
	min_dist = np.amin(distances)
	distances_main.append((trainingset[x],train_label[x],min_dist))
	
	distances_main.sort(key=operator.itemgetter(2))
	neighbors =[]
	

	for x in range(k):
		neighbors.append(distances_main[x][1])
	neighbors=np.array(neighbors)
	neighbors=np.reshape(neighbors,(4,1))
	return neighbors
		


def findKnearest(countneighbours):
	return sorted(countneighbours.items(), key=operator.itemgetter(1), reverse=True)


def find_majority(neighbors):


	countneighbours = {}



	for m in range(len(neighbors)):



		value =neighbors[m,:]


		if value in tuple(countneighbours):
			countneighbours[tuple(value)] += 1
		else:
			countneighbours[tuple(value)] = 1


		total = findKnearest(countneighbours)
	
	return total[0][0]


def plot_confusion_matrix(df_confusion, title='Confusion matrix', cmap=plt.cm.gray_r):
    plt.matshow(df_confusion, cmap=cmap)
    plt.colorbar()
    tick_marks = np.arange(len(df_confusion.columns))
    plt.xticks(tick_marks, df_confusion.columns, rotation=45)
    plt.yticks(tick_marks, df_confusion.index)
    plt.ylabel(df_confusion.index.name)
    plt.xlabel(df_confusion.columns.name)
    plt.show()



k=4

correct_v = 0
y_pred=[]
y_actu=[]

for x in range(int(len(raw_test))):
	neighbors =np.array(getNeighbors(raw_train,raw_test[x], k,train_label))

	label_pred=find_majority(neighbors)
	y_pred.append(label_pred)
	y_actu.append(test_label[x])
	if label_pred==test_label[x]:
		correct_v +=1
	print("image %d is done"%(x))



accuracy=correct_v/(int(len(raw_test)))
print(accuracy*100)
x1=pd.Series(y_actu, name='Actual')
y1=pd.Series(y_pred, name='Predicted')
df_confusion = pd.crosstab(x1,y1,margins=True)
print(df_confusion)
plot_confusion_matrix(df_confusion)


